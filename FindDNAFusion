#!/usr/bin/perl


use strict;
use Getopt::Long;
use Cwd qw(cwd);
use POSIX qw(strftime);


=head1 NAME

FindDNAFusion


=head2 SYNOPSIS

./FindDNAFusion -i input-seq-dir -b bam-dir -c CPUs  -o output-dir


=head3 DESCRIPTION

This program makes fusion calls at DNA level in multiple tumor samples 
by integrating three different tools of FACTERA, JuLI and GeneFuse with
methods of processing the fusion calls such as parsing the outputs
of the three callers, filtering out artifacts, selecting reportable 
fusions and annotating them for reportable fusions clinically. 

It takes a directory containing a set of FASTQ files and another directory
including BAM files (if not available, the program will generate them)
as input. The output results will be generated in three different folders, 
which are then parsed, filtered and selected into two text files: 
Possible-fusions.txt and Reportable-fusions.txt.


=head4 AUTHOR

Xiaokang Pan (Xiaokang.Pan@osumc.edu)


=head5 LAST UPDATE

01/07/2023

=cut


my $usage = <<EOS;
   Usage: perl $0 -i inputpath [-options]

   -i|inpath   [string] (full path of input dir storing fastq files)
   -b|bampath  [string] (full path of input dir storing BAM files)
   -t|time     [string] (expected waiting time in minutes to start actual run)
   -c|cpus     [string] CPU number
   -o|outpath  [string] (full path of output dir which will store four subfolders)
   -h|help (help information)

EOS

my ($bampath, $inpath, $outpath, $cpus, $time, $help);
GetOptions (
  "inpath=s"  => \$inpath,       # full path of input dir storing fastq files
  "bampath:s" => \$bampath,      # full path of input dir storing BAM files
  "time:s"    => \$time,         # expected waiting time in minutes
  "cpus:s"    => \$cpus,         # number of CPUs
  "outpath:s" => \$outpath,      # full path of output dir which will store four subfolders
  "help:s"    => \$help          # help information
);

die "\n$usage\n" if ($help or
                     !defined($inpath));

my $current_path = cwd;

if ($inpath !~ /^\/.+\/.+$/) {
    $inpath =  $current_path."/".$inpath;
}

if (!$outpath) {
    system("mkdir output");
    $outpath = $current_path."/output";

} elsif ($outpath !~ /^\/.+\/.+$/) {
    $outpath = $current_path."/".$outpath;
}

# make sub-dirs for different types of output results
system("mkdir $outpath/genefuse");
system("mkdir $outpath/factera");
system("mkdir $outpath/juli");

if ($time) {
   $time  = $time."m";
   system("sleep $time");
}

if (!$cpus) {
   $cpus = 16;
}

print "running GeneFuse ......\n";
system("perl runGeneFuse.pl -i $inpath -c $cpus -o $outpath/genefuse");
system("sleep 180m");

# The program runs generateBAM.pl to generate BAM files
# if they do not exist
if (!$bampath) {
    system("mkdir $outpath/mbam");
    system("perl generateBAM.pl -i $inpath -o $outpath/mbam");

    print "running FACTERA ......\n";
    system("perl runFACTERA.pl -i $outpath/mbam -o $outpath/factera");

    print "running JuLI ......\n";
    system("perl runJuLI.pl -i $outpath/mbam -o $outpath/juli");

} else {
    system("sleep 100m");

    print "running FACTERA ......\n";
    system("perl runFACTERA.pl -i $bampath -o $outpath/factera");

    print "running JuLI ......\n";
    system("perl runJuLI.pl -i $bampath -o $outpath/juli");
}
system("sleep 10m");

my @seq_files = <$outpath/mbam/*.bam>;
my $nsamples  = scalar @seq_files;

#Check if GeneFuse run completed. 
#If not, wait for it.
my @html_files = <$outpath/genefuse/*.html>;
my $html_file_num = scalar @html_files;
while ($html_file_num < $nsamples) {
    system("sleep 5m");
    my @html_files2 = <$outpath/genefuse/*.html>;
    $html_file_num = scalar @html_files2; 
}  
   
#Check if JuLI run completed
#If wait for it 
my @pdf_files = <$outpath/juli/*.pdf>;
my $pdf_file_num = scalar @pdf_files;
while ($pdf_file_num < $nsamples) {
    system("sleep 5m");
    my @pdf_files2 = <$outpath/juli/*.pdf>;
    $pdf_file_num = scalar @pdf_files2;
}

system("perl processing-for-fusion-report.pl -i $outpath -b $outpath/mbam -o $outpath");

# remove files which are not interesting
system("rm *.json");
system("rm nohup.out");
print "\n\n------- Done! -------\n";

