#!/usr/bin/perl


use strict;
use Getopt::Long;
use Cwd qw(cwd);
use POSIX qw(strftime);


=head1 NAME

FindDNAFusion


=head2 SYNOPSIS

./FindDNAFusion -i input-seq-dir -p pos_file_of_target_intron_regions -r ref_genome -o output-dir


=head3 DESCRIPTION

This program makes fusion calls at DNA level in multiple tumor samples 
by integrating three different tools of FACTERA, JuLI and GeneFuse with
methods of processing the fusion calls such as parsing the outputs
of the three callers, filtering out artifacts, selecting reportable 
fusions and annotating them for reportable fusions clinically. 

It required to take a directory containing a set of FASTQ files and a 
BED file containing targeted intron regions associated gene fusions 
as input. The output results will be generated in three different 
folders, which are then parsed, filtered and selected into two text 
files: Possible-fusions.txt and Reportable-fusions.txt.


=head4 AUTHOR

Xiaokang Pan (Xiaokang.Pan@osumc.edu)


=head5 LAST UPDATE

01/29/2023

=cut


my $usage = <<EOS;
   Usage: perl $0 -i inpath [-options]

   -i|inpath      [string] (input sequence directory storing fastq files)
   -p|pos_file    [file]   (BED file contains position info of targeted intron regions)
   -r|ref_genome  [file]   (FASTA file contains reference genome which must be stored in 
                            the same directory with other files generated by BWA index 
                            command see document)
   -b|bampath     [string] (directory storing pre-generated BAM and their index files)
   -c|cpus        [int]    (number of CPUs or threads per sample to be used)
   -o|outpath     [string] (output directory)
   -h|help (help information)

EOS

my ($bampath, $inpath, $pos_file, $outpath, $ref_genome, $cpus, $time, $help);
GetOptions (
  "inpath=s"     => \$inpath,     # input sequence directory storing fastq files
  "pos_file=s"   => \$pos_file,   # BED file contains position info of targeted intron regions
  "ref_genome:s" => \$ref_genome, # reference genome file in FASTA format
  "bampath:s"    => \$bampath,    # directory storing pre-generated BAM and index files
  "cpus:s"       => \$cpus,       # number of CPUs or threads per sample to be used
  "outpath:s"    => \$outpath,    # output directory
  "help:s"       => \$help        # help information
);

die "\n$usage\n" if ($help or
                     !defined($inpath) or
                     !defined($pos_file));

my $current_path = cwd;

if ($inpath !~ /^\/.+\/.+$/) {
    $inpath =  $current_path."/".$inpath;
}

if (!$ref_genome) {
    $ref_genome = "$current_path/database/hg19.fasta";
}

if (!$outpath) {
    system("mkdir output");
    $outpath = $current_path."/output";

} elsif ($outpath !~ /^\/.+\/.+$/) {
    $outpath = $current_path."/".$outpath;
}

# make sub-dirs for different types of output results
system("mkdir $outpath/genefuse");
system("mkdir $outpath/factera");
system("mkdir $outpath/juli");

if ($time) {
   $time  = $time."m";
   system("sleep $time");
}

if (!$cpus) {
   $cpus = 16;
}

print "running GeneFuse ......\n";
system("perl runGeneFuse.pl -i $inpath -c $cpus -r $ref_genome -o $outpath/genefuse");
system("sleep 180m");

# The program runs generateBAM.pl to generate BAM files
# if they do not exist
if (!$bampath) {
    system("mkdir $outpath/mbam");
    system("perl generateBAM.pl -i $inpath -r $ref_genome -o $outpath/mbam");

    print "running FACTERA ......\n";
    system("perl runFACTERA.pl -i $outpath/mbam -p $pos_file -o $outpath/factera");

    print "running JuLI ......\n";
    system("perl runJuLI.pl -i $outpath/mbam -r $ref_genome -o $outpath/juli");

} else {
    system("sleep 100m");

    print "running FACTERA ......\n";
    system("perl runFACTERA.pl -i $bampath -p $pos_file -o $outpath/factera");

    print "running JuLI ......\n";
    system("perl runJuLI.pl -i $bampath -r $ref_genome -o $outpath/juli");
}
system("sleep 10m");

my @seq_files = <$outpath/mbam/*.bam>;
my $nsamples  = scalar @seq_files;

#Check if GeneFuse run completed. 
#If not, wait for it.
my @html_files = <$outpath/genefuse/*.html>;
my $html_file_num = scalar @html_files;
while ($html_file_num < $nsamples) {
    system("sleep 5m");
    my @html_files2 = <$outpath/genefuse/*.html>;
    $html_file_num = scalar @html_files2; 
}  
   
#Check if JuLI run completed.
#If not, wait for it 
my @txt_files = <$outpath/juli/*.txt>;
my $txt_file_num = scalar @txt_files;
while ($txt_file_num < $nsamples*2) {
    system("sleep 5m");
    my @txt_files2 = <$outpath/juli/*.txt>;
    $txt_file_num = scalar @txt_files2;
}

my $bam_file_path;
if ($bampath) {
    $bam_file_path = $bampath;
} else {
    $bam_file_path = "$outpath/mbam";
}

system("perl processing-for-fusion-report.pl -i $outpath -b $bam_file_path -o $outpath");

# remove files which are not interesting
system("rm *.json");
system("rm nohup.out");
print "\n\n------- Done! -------\n";

