#!/usr/bin/perl


use strict;
use Getopt::Long;
use Cwd qw(cwd);
use POSIX qw(strftime);


=head1 NAME

FindDNAFusion

=head2 version 

1.0

=head3 SYNOPSIS

./FindDNAFusion -i input-seq-dir -p pos_file_of_target_intron_regions -r ref_genomei -c 16 -o output-dir


=head4 DESCRIPTION

This program makes fusion calls at DNA level in multiple tumor samples 
by integrating three different tools of FACTERA, JuLI and GeneFuse with
methods of processing the fusion calls such as parsing the outputs
of the three callers, filtering out artifacts, selecting reportable 
fusions and annotating them for reportable fusions clinically. 

It requires to take a directory containing a set of FASTQ files and a 
BED file containing targeted intron regions associated gene fusions 
as input. The output results will be generated in three different 
folders, which are then parsed, filtered and selected into two text 
files: Possible-fusions.txt and Reportable-fusions.txt. A set of PDF
files are also generated. Each PDF file contains reportable fusions
being annotated in graphical representation of a sample.


=head5 AUTHOR

Xiaokang Pan (Xiaokang.Pan@osumc.edu)


=cut


my $usage = <<EOS;
   Usage: perl $0 -i inpath [-options]

   -i|inpath      [string] (input sequence directory storing fastq files)
   -p|pos_file    [file]   (BED file contains position info of targeted intron regions)
   -r|ref_genome  [file]   (FASTA file contains reference genome which must be stored in the 
                            same directory with other files generated by "bwa index" command)
   -b|bampath     [string] (directory storing pre-generated BAM and their index files)
   -c|cpus        [int]    (number of CPUs or threads per sample to be used)
   -o|outpath     [string] (output directory)
   -h|help        [string] (help information)

EOS

my ($bampath, $inpath, $pos_file, $outpath, $ref_genome, $cpus, $time, $help);
GetOptions (
  "inpath=s"     => \$inpath,     # input sequence directory storing fastq files
  "pos_file=s"   => \$pos_file,   # BED file contains position info of targeted intron regions
  "ref_genome:s" => \$ref_genome, # reference genome file in FASTA format
  "bampath:s"    => \$bampath,    # directory storing pre-generated BAM and index files
  "cpus:s"       => \$cpus,       # number of CPUs or threads per sample to be used
  "outpath:s"    => \$outpath,    # output directory
  "help:s"       => \$help        # help information
);

die "\n$usage\n" if ($help or
                     !defined($inpath) or
                     !defined($pos_file));

my $current_path = cwd;

if ($inpath !~ /^\/.+\/.+$/) {
    $inpath =  $current_path."/".$inpath;
}

if (!$ref_genome) {
    $ref_genome = "$current_path/database/hg19.fasta";
}

if (!$outpath) {
    system("mkdir output");
    $outpath = $current_path."/output";

} elsif ($outpath !~ /^\/.+\/.+$/) {
    $outpath = $current_path."/".$outpath;
}

# make sub-dirs for different types of output results
system("mkdir $outpath/genefuse");
system("mkdir $outpath/factera");
system("mkdir $outpath/juli");

if ($time) {
   $time  = $time."m";
   system("sleep $time");
}

if (!$cpus) {
   $cpus = 16;
}

print "running GeneFuse ......\n";
runGeneFuse($inpath, $ref_genome, $cpus, "$outpath/genefuse");
system("sleep 180m");

# The program runs generateBAM.pl to generate BAM files if they do not exist
if (!$bampath) {
    system("mkdir $outpath/mbam");
    print "generating BAMs ......\n";
    generateBAM($inpath, $ref_genome, $cpus, "$outpath/mbam");

    print "running FACTERA ......\n";
    runFACTERA("$outpath/mbam", $pos_file, "$outpath/factera");

    print "running JuLI ......\n";
    runJuLI("$outpath/mbam", $ref_genome, "$outpath/juli");

} else {
    system("sleep 120m");

    print "running FACTERA ......\n";
    runFACTERA($bampath, $pos_file, "$outpath/factera");

    print "running JuLI ......\n";
    runJuLI($bampath, $ref_genome, "$outpath/juli");
}
system("sleep 10m");

my @seq_files = <$outpath/mbam/*.bam>;
my $nsamples  = scalar @seq_files;

#Check if GeneFuse run completed. If not, wait for it.
my @html_files = <$outpath/genefuse/*.html>;
my $html_file_num = scalar @html_files;
while ($html_file_num < $nsamples) {
    system("sleep 5m");
    my @html_files2 = <$outpath/genefuse/*.html>;
    $html_file_num = scalar @html_files2; 
}  
   
#Check if JuLI run completed. If not, wait for it 
my @pdf_files = <$outpath/juli/*.pdf>;
my $pdf_file_num = scalar @pdf_files;
my $time_count = 0;
while ($pdf_file_num < ($nsamples/2)) {
    system("sleep 10m");
    $time_count += 10 if $pdf_file_num > 1;
    my @pdf_files2 = <$outpath/juli/*.pdf>;
    $pdf_file_num = scalar @pdf_files2;
    last if $time_count >= 30;
}

my $bam_file_path;
if ($bampath) {
    $bam_file_path = $bampath;
} else {
    $bam_file_path = "$outpath/mbam";
}

print "processing for fusion report ......\n";
system("perl processing-for-fusion-report.pl -i $outpath -b $bam_file_path -o $outpath");

# remove files which are not interesting
system("rm *.json");
system("rm nohup.out");
print "\n\n------- Done! -------\n";

#--------------------------- end of main routine -------------------------

sub generateBAM {
    my ($inpath, $ref_genome, $cpus, $outpath) = @_;

    my @files = <$inpath/*.fastq.gz>;

    my %samples;
    foreach my $file (@files) {

       my $sample_name;

       if ($file =~ /^.+\/(.+)_R\d\.fastq\.gz$/) {
           $sample_name = $1;
           $samples{$sample_name} = 1;
       }
    }

    # run BWA MEM to map on Human Genome
    foreach my $sample (sort keys %samples) {

        next if ($sample =~ /-RNA$/ || $sample =~ /-R$/);

        my $r1_fastq_file = "$inpath/$sample"."_R1.fastq.gz";
        my $r2_fastq_file = "$inpath/$sample"."_R2.fastq.gz";
        system("bwa mem -M -t $cpus $ref_genome $r1_fastq_file $r2_fastq_file | samtools sort -@ $cpus -o $outpath/$sample.bam - &");
    }
    system("sleep 60m");

    # check if mapping completed.
    # if not, wait for a few minutes
    my @tmp_files = <$outpath/*.tmp.*>;
    while (@tmp_files) {
       system("sleep 5m");
       @tmp_files = <$outpath/*.tmp.*>;
    }

    # make index
    my @bam_files = <$outpath/*.bam>;
    foreach my $bam_file (@bam_files) {

       system("samtools index $bam_file &");
    }

    system("sleep 10m");
    print "BAM generation is completed.\n\n";
}

sub runFACTERA {

    my ($inpath, $pos_file, $outpath) = @_;

    if (!$pos_file) {
        $pos_file = "database/CTP-targeted-intron-regions.bed";
    }

    open (INPUT, "$pos_file") || die $!;
    system("mkdir tmp_beds");
    my $gene0;
    while (<INPUT>) {
       my $line = $_;
       chomp($line);
       next if !$line;

       my @items = split(/\t/, $line);
       my $gene = $items[3];
       if (!$gene0 || $gene0 ne $gene) {
           if ($gene0 && $gene0 ne $gene) {
               close(OUTPUT);
           }
           open (OUTPUT, ">>tmp_beds/$gene.bed") || die $!;
        }
        print OUTPUT "$line\n";
       $gene0 = $gene;
    }

    my @files = <$inpath/*.bam>;
    my @bed_files = <tmp_beds/*.bed>;

    my %outputpath;
    foreach my $file (@files) {

       my $sample_name;
       if ($file =~ /^.+\/(.+)\.bam$/) {
          $sample_name = $1;

          my $outpath2 = "$outpath/$sample_name";
          system("mkdir $outpath2");

          foreach my $bed_file (@bed_files) {
             my ($fgene) = $bed_file =~ /^.+\/(.+)\.bed$/;

             my $outpath3 = "$outpath2/$fgene";

             system("mkdir $outpath3");

             $outputpath{$sample_name}{$outpath3} = 1;

             system("nohup factera.pl -p 4 -s 2 -F -o $outpath3 $file database/exons.bed database/hg19.2bit $bed_file &");
          }
          system("sleep 3m");
       }
   }

   system("sleep 15m");

   foreach my $sample (keys %outputpath) {

      open (OUTPUT2, ">>$outpath/$sample.factera.fusions.txt") || die $!;
      my $title = "Est_Type\tRegion1\tRegion2 Break1\tBreak2\tBreak_support1\tBreak_support2\tBreak_offset\tOrientation\tOrder1\tOrder2\tBreak_depth\tProper_pair_support\tUnmapped_support\tImproper_pair_support\tPaired_end_depth\tTotal_depth\tFusion_seq\tNon-templated_seq";
      print OUTPUT2 "$title\n";
      my $gene_num = 0;
      foreach my $path (keys %{$outputpath{$sample}}) {
         $gene_num++;

         if (open (INPUT2, "$path/$sample.factera.fusions.txt")) {
             my $line_num = 0;
             while(<INPUT2>) {

                my $line = $_;
                chomp($line);
                next if !$line;

                $line_num++;

                if ($line_num == 1) {
                    next;
                } else {
                    print OUTPUT2 "$line\n";
                }
             }
             close(INPUT2);
          }
          system("rm -r $path");
       }
       close(OUTPUT2);
       system("rm -r $outpath/$sample");
   }
   system("rm -r tmp_beds");
}

sub runGeneFuse {

    my ($inpath, $ref_genome, $cpus, $outpath) = @_;

    my @files = <$inpath/*.fastq.gz>;

    my %samples;
    foreach my $file (@files) {

       my $sample_name;

       if ($file =~ /^.+\/(.+)_R\d\.fastq\.gz$/) {
           $sample_name = $1;
           $samples{$sample_name} = 1;
       }
    }
   
    my $fusionGenes = "database/PossibleFusionGenes.csv";
    foreach my $sample (sort keys %samples) {

       next if ($sample =~ /-RNA$/ || $sample =~ /-R$/);

       my $r1_fastq_file = "$inpath/$sample"."_R1.fastq.gz";
       my $r2_fastq_file = "$inpath/$sample"."_R2.fastq.gz";
       system("nohup genefuse -r $ref_genome -f $fusionGenes -1 $r1_fastq_file -2 $r2_fastq_file -t $cpus -u 2 -h $outpath/$sample.html > $outpath/$sample-fusion.txt &");
    }
}

sub runJuLI {

   my ($inpath, $ref_genome, $outpath) = @_;
   my @files = <$inpath/*.bam>;

   foreach my $file (@files) {

      my $sample_name;

      if ($file =~ /^.+\/(.+)\.bam$/) {
          $sample_name = $1;
      }
      system("./run-JuLI-single-sample.R $file $sample_name $ref_genome $outpath &");
   }
}
