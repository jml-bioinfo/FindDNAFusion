#!/usr/bin/perl


use strict;
use Getopt::Long;
use Cwd qw(cwd);
use POSIX qw(strftime);


=head1 NAME

findDNAFusion


=head2 SYNOPSIS

./findDNAFusion2 -i input-bam-dir -o output-dir


=head3 DESCRIPTION

This program detect gene fusions at DNA level in multiple samples by 
implementing three different algorithms of FACTERA, JuLI and GeneFuse. 
It takes a set of fastq files as input. The putput results will be 
generated in three different folders, which are then parsed and filtered 
into a single text file.


=head4 AUTHOR

Xiaokang Pan (Xiaokang.Pan@osumc.edu)


=head5 LAST UPDATE

04/19/2021

=cut


my $usage = <<EOS;
   Usage: perl $0 -i inputpath [-options]

   -i|inpath  [string] (full path of input dir storing fastq files)
   -t|time    [string] (expected waiting time in minutes to start actual run)
   -o|outpath [string] (full path of output dir which will store four subfolders)
   -h|help (help information)

EOS

my ($inpath, $outpath, $time, $help);
GetOptions (
  "inpath=s"  => \$inpath,        # full path of input dir storing fastq files
  "time:s"    => \$time,          # expected waiting time in minutes
  "outpath:s" => \$outpath,       # full path of output dir which will store four subfolders
  "help:s"    => \$help           # help information
);

die "\n$usage\n" if ($help or
                     !defined($inpath));

my $current_path = cwd;

# set output path at "/ion/LNGS-new/" in default
if (!$outpath) {

    system("mkdir output");
    $outpath = $current_path."/output";

} elsif ($outpath !~ /^.+\/.+$/) {
    $outpath = $current_path."/".$outpath;
}

# make sub-dirs for different types of output results
system("mkdir $outpath");
system("mkdir $outpath/mbam");
system("mkdir $outpath/factera");
system("mkdir $outpath/juli");
system("mkdir $outpath/genefuse");

if ($time) {
   $time  = $time."m";
   system("sleep $time");
}

# First run runGeneFuse.pl to generate GeneFuse output
print "running GeneFuse ......\n";
system("perl runGeneFuse.pl -i $inpath -o $outpath/genefuse");

# Then, the program runs preprocessData.pl to generate BAMfiles
system("perl preprocessData.pl -i $inpath -o $outpath/mbam");

print "running FACTERA ......\n";
system("perl runFACTERA.pl -i $outpath/mbam -o $outpath/factera");

system("sleep 100m");
print "running JuLI ......\n";
system("perl runJuLI.pl -i $outpath/mbam -o $outpath/juli");

system("sleep 120m");
my @seq_files = <$inpath/*.fastq.gz>;
my $nsamples  = scalar @seq_files;
my @html_files = <$outpath/genefuse/*.html>;
my $html_file_num = scalar @html_files;

while ($html_file_num < ($nsamples/2)) {
    system("sleep 20m");
    my @html_files2 = <$outpath/genefuse/*.html>;
    $html_file_num = scalar @html_files2;   
}
   
system("perl filterFusions.pl -i $outpath -o $outpath/Output_summary.txt");

#system("rm nohup.out");
print "\n------- Done! -------\n";

